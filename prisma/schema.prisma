generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  name       String
  role       Role       @default(REQUESTER)
  costCenter String
  department String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  approvals  Approval[]
  comments   Comment[]
  orders     Order[]
}

model Product {
  id               String           @id @default(cuid())
  name             String
  description      String?
  category         Category
  model            String?
  imageUrl         String?
  price            Float?
  isActive         Boolean          @default(true)
  requiresApproval Boolean          @default(false)
  isBundle         Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orderItems       OrderItem[]
  bundleItems      ProductBundle[]  @relation("BundleParent")
  includedInBundles ProductBundle[] @relation("BundleChild")
}

model ProductBundle {
  id         String   @id @default(cuid())
  bundleId   String
  productId  String
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  bundle     Product  @relation("BundleParent", fields: [bundleId], references: [id], onDelete: Cascade)
  product    Product  @relation("BundleChild", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([bundleId, productId])
}

model BusinessCardOrder {
  id           String   @id @default(cuid())
  orderId      String   @unique
  fullName     String
  jobTitle     String
  department   String
  email        String
  phone        String?
  mobile       String?
  quantity     Int      @default(250)
  specialNotes String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id               String              @id @default(cuid())
  orderNumber      String              @unique
  status           OrderStatus         @default(NEW)
  userId           String
  costCenter       String
  specialRequest   String?
  justification    String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  approvals        Approval[]
  asset            Asset?
  comments         Comment[]
  user             User                @relation(fields: [userId], references: [id])
  items            OrderItem[]
  statusHistory    StatusHistory[]
  businessCardOrder BusinessCardOrder?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Comment {
  id         String   @id @default(cuid())
  orderId    String
  userId     String
  content    String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
}

model Approval {
  id         String         @id @default(cuid())
  orderId    String
  approverId String
  status     ApprovalStatus @default(PENDING)
  comment    String?
  createdAt  DateTime       @default(now())
  decidedAt  DateTime?
  approver   User           @relation(fields: [approverId], references: [id])
  order      Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model StatusHistory {
  id         String       @id @default(cuid())
  orderId    String
  fromStatus OrderStatus?
  toStatus   OrderStatus
  changedBy  String
  note       String?
  createdAt  DateTime     @default(now())
  order      Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Asset {
  id           String   @id @default(cuid())
  orderId      String   @unique
  assetTag     String   @unique
  serialNumber String?
  location     String?
  assignedTo   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id])
}

enum Role {
  REQUESTER
  IT_AGENT
  RECEPTION_AGENT
  APPROVER
  ADMIN
}

enum Category {
  WEBCAM
  HEADSET
  MOUSE
  KEYBOARD
  PRINTER_TONER
  SPEAKERS
  ADAPTER
  CABLE
  WHITEBOARD
  PINBOARD
  FLIPCHART
  CHAIR
  BUSINESS_PRINTS
  OFFICE_MISC
}

enum OrderStatus {
  NEW
  IN_REVIEW
  PENDING_APPROVAL
  APPROVED
  ORDERED
  IN_TRANSIT
  READY_FOR_PICKUP
  DELIVERED
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
