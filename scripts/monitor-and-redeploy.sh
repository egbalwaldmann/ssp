#!/bin/bash

# 🚀 SSP Automated Monitoring & Redeploy Script
# This script monitors database health and triggers redeployments when needed

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SUPABASE_ACCESS_TOKEN="sbp_cbdde3b1f039c215daafcb76ed18f8330279fe68"
DATABASE_URL="postgresql://postgres:SjqeduVHvbbKPYoz@db.cybsvbhhsepzfoakbqsz.supabase.co:5432/postgres?sslmode=require"
LIVE_SITE="https://weilesgeht.de"
AWS_APP_ID="d2zig7giatoyll"
LOG_FILE="monitoring.log"

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
    log "$message"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check database health via Supabase CLI
check_database_health() {
    print_status $BLUE "🔍 Checking database health via Supabase CLI..."
    
    if ! command_exists "./supabase"; then
        print_status $RED "❌ Supabase CLI not found. Downloading..."
        curl -L https://github.com/supabase/cli/releases/download/v2.47.2/supabase_darwin_arm64.tar.gz | tar -xz
        chmod +x supabase
    fi
    
    # Check project status
    local project_status=$(export SUPABASE_ACCESS_TOKEN="$SUPABASE_ACCESS_TOKEN" && ./supabase projects list --output json 2>/dev/null | jq -r '.[0].status // "UNKNOWN"')
    
    if [ "$project_status" = "ACTIVE_HEALTHY" ]; then
        print_status $GREEN "✅ Database status: $project_status"
        return 0
    else
        print_status $RED "❌ Database status: $project_status"
        return 1
    fi
}

# Function to check database performance
check_database_performance() {
    print_status $BLUE "📊 Checking database performance..."
    
    # Get database stats
    local db_stats=$(export SUPABASE_ACCESS_TOKEN="$SUPABASE_ACCESS_TOKEN" && ./supabase inspect db db-stats --db-url "$DATABASE_URL" --workdir /tmp 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        print_status $GREEN "✅ Database performance check passed"
        echo "$db_stats"
        return 0
    else
        print_status $RED "❌ Database performance check failed"
        return 1
    fi
}

# Function to check API endpoints
check_api_endpoints() {
    print_status $BLUE "🌐 Checking API endpoints..."
    
    local endpoints=(
        "/api/health"
        "/api/products"
        "/api/orders"
    )
    
    local failed_endpoints=()
    
    for endpoint in "${endpoints[@]}"; do
        local response=$(curl -s -o /dev/null -w "%{http_code}" "$LIVE_SITE$endpoint" 2>/dev/null)
        
        if [ "$response" = "200" ] || [ "$response" = "401" ]; then
            print_status $GREEN "✅ $endpoint: HTTP $response"
        else
            print_status $RED "❌ $endpoint: HTTP $response"
            failed_endpoints+=("$endpoint")
        fi
    done
    
    if [ ${#failed_endpoints[@]} -eq 0 ]; then
        return 0
    else
        print_status $RED "❌ Failed endpoints: ${failed_endpoints[*]}"
        return 1
    fi
}

# Function to check live site functionality
check_live_site() {
    print_status $BLUE "🔍 Checking live site functionality..."
    
    # Check if site is accessible
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$LIVE_SITE" 2>/dev/null)
    
    if [ "$response" = "200" ]; then
        print_status $GREEN "✅ Live site accessible: HTTP $response"
        
        # Check for demo mode indicator
        local demo_mode=$(curl -s "$LIVE_SITE" | grep -i "demo-modus" | wc -l)
        if [ "$demo_mode" -gt 0 ]; then
            print_status $YELLOW "⚠️  Demo mode detected on live site"
            return 1
        else
            print_status $GREEN "✅ No demo mode detected"
        fi
        
        return 0
    else
        print_status $RED "❌ Live site not accessible: HTTP $response"
        return 1
    fi
}

# Function to trigger redeploy
trigger_redeploy() {
    print_status $YELLOW "🚀 Triggering redeploy..."
    
    # Create a trigger file to force deployment
    echo "# Redeploy triggered at $(date)" > deploy-trigger-$(date +%s).txt
    echo "Reason: Automated monitoring detected issues" >> deploy-trigger-$(date +%s).txt
    
    # Commit and push
    git add .
    git commit -m "🚀 Automated redeploy triggered by monitoring

- Database health check: $1
- API endpoints: $2  
- Live site: $3
- Timestamp: $(date)

This commit was automatically generated by the monitoring script."
    
    git push origin main
    
    print_status $GREEN "✅ Redeploy triggered successfully"
    
    # Wait for deployment
    print_status $BLUE "⏳ Waiting for deployment to complete (6 minutes)..."
    sleep 360
    
    # Verify deployment
    verify_deployment
}

# Function to verify deployment
verify_deployment() {
    print_status $BLUE "🔍 Verifying deployment..."
    
    # Wait a bit more for deployment to fully complete
    sleep 60
    
    # Check if site is working
    if check_live_site && check_api_endpoints; then
        print_status $GREEN "✅ Deployment verification successful"
        return 0
    else
        print_status $RED "❌ Deployment verification failed"
        return 1
    fi
}

# Function to check AWS Amplify status
check_amplify_status() {
    print_status $BLUE "☁️  Checking AWS Amplify status..."
    
    if ! command_exists "aws"; then
        print_status $YELLOW "⚠️  AWS CLI not found, skipping Amplify check"
        return 0
    fi
    
    local last_job=$(aws amplify list-jobs --app-id "$AWS_APP_ID" --branch-name main --max-results 1 --output json 2>/dev/null | jq -r '.jobSummaries[0].status // "UNKNOWN"')
    
    if [ "$last_job" = "SUCCEED" ]; then
        print_status $GREEN "✅ Last Amplify job: $last_job"
        return 0
    else
        print_status $RED "❌ Last Amplify job: $last_job"
        return 1
    fi
}

# Main monitoring function
main() {
    print_status $BLUE "🚀 Starting SSP monitoring and redeploy process..."
    print_status $BLUE "📅 $(date)"
    print_status $BLUE "🌐 Live site: $LIVE_SITE"
    
    # Initialize counters
    local db_health=0
    local api_health=0
    local site_health=0
    local amplify_health=0
    
    # Check database health
    if check_database_health; then
        db_health=1
        check_database_performance
    fi
    
    # Check API endpoints
    if check_api_endpoints; then
        api_health=1
    fi
    
    # Check live site
    if check_live_site; then
        site_health=1
    fi
    
    # Check Amplify status
    if check_amplify_status; then
        amplify_health=1
    fi
    
    # Summary
    print_status $BLUE "📊 Health Summary:"
    print_status $BLUE "  Database: $([ $db_health -eq 1 ] && echo "✅ Healthy" || echo "❌ Issues")"
    print_status $BLUE "  API Endpoints: $([ $api_health -eq 1 ] && echo "✅ Healthy" || echo "❌ Issues")"
    print_status $BLUE "  Live Site: $([ $site_health -eq 1 ] && echo "✅ Healthy" || echo "❌ Issues")"
    print_status $BLUE "  Amplify: $([ $amplify_health -eq 1 ] && echo "✅ Healthy" || echo "❌ Issues")"
    
    # Determine if redeploy is needed
    local total_health=$((db_health + api_health + site_health + amplify_health))
    
    if [ $total_health -lt 4 ]; then
        print_status $YELLOW "⚠️  Issues detected. Triggering redeploy..."
        trigger_redeploy $db_health $api_health $site_health
    else
        print_status $GREEN "✅ All systems healthy. No redeploy needed."
    fi
    
    print_status $BLUE "🏁 Monitoring complete."
}

# Run main function
main "$@"
